use smallvec::{smallvec, SmallVec};
use std::{
    fmt::Debug,
    hash::Hash,
    marker::PhantomData,
    ops::{Index, IndexMut},
};

pub trait DSize: Debug + Copy + Eq + Ord + Hash {
    const SIZE: u8;
}

pub mod d {
    use super::DSize;
    macro_rules! impl_d {
        ($name:ident, $size:expr) => {
            #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
            pub struct $name;
            impl DSize for $name {
                const SIZE: u8 = $size;
            }
        };
    }

    impl_d!(U5, 5);
    impl_d!(U6, 6);
    impl_d!(U7, 7);
    impl_d!(U8, 8);
    impl_d!(U9, 9);
    impl_d!(U10, 10);
    impl_d!(U11, 11);
    impl_d!(U12, 12);
    impl_d!(U13, 13);
    impl_d!(U14, 14);
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Point<D> {
    x: u8,
    y: u8,
    z: u8,
    _phantom: PhantomData<D>,
}

#[derive(Debug, Clone, Eq, PartialEq)]
pub struct Grid3<T, D> {
    pub data: Vec<T>,
    _phantom: PhantomData<D>,
}

#[derive(Debug, Clone, Eq, PartialEq)]
pub struct GridFront<T, D> {
    pub data: Vec<T>,
    _phantom: PhantomData<D>,
}

#[derive(Debug, Clone, Eq, PartialEq)]
pub struct GridRight<T, D> {
    pub data: Vec<T>,
    _phantom: PhantomData<D>,
}

impl<D: DSize> Point<D> {
    #[inline(always)]
    pub const fn new(x: u8, y: u8, z: u8) -> Point<D> {
        Point {
            x,
            y,
            z,
            _phantom: PhantomData,
        }
    }

    fn to_x(self, dx: u8) -> Option<Point<D>> {
        let x = self.x.wrapping_add(dx);
        if x < D::SIZE {
            Some(Point::new(x, self.y, self.z))
        } else {
            None
        }
    }

    fn to_y(self, dy: u8) -> Option<Point<D>> {
        let y = self.y.wrapping_add(dy);
        if y < D::SIZE {
            Some(Point::new(self.x, y, self.z))
        } else {
            None
        }
    }

    fn to_z(self, dz: u8) -> Option<Point<D>> {
        let z = self.z.wrapping_add(dz);
        if z < D::SIZE {
            Some(Point::new(self.x, self.y, z))
        } else {
            None
        }
    }

    pub fn next_cell(self, direction: u8) -> Option<Point<D>> {
        match direction {
            0 => self.to_x(1),
            1 => self.to_x(!0),
            2 => self.to_y(1),
            3 => self.to_y(!0),
            4 => self.to_z(1),
            5 => self.to_z(!0),
            _ => None,
        }
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub enum AxisMap {
    None,
    Map1 { from: u8, to: u8 },
    Map2 { map: [u8; 6] },
}

impl AxisMap {
    pub const fn new() -> AxisMap {
        AxisMap::None
    }

    pub fn fix(self, d1: u8, d2: u8) -> AxisMap {
        match self {
            AxisMap::None => AxisMap::Map1 { from: d1, to: d2 },
            AxisMap::Map1 { from, to } if from == d1 || from == d1 ^ 1 => {
                AxisMap::Map1 { from, to }
            }
            AxisMap::Map1 { from, to } => {
                let map = match (from, to, d1, d2) {
                    (from1, to1, from2, to2) if from1 == to1 && from2 == to2 => [0, 1, 2, 3, 4, 5],
                    (0, 0, 2, 3)
                    | (0, 0, 3, 2)
                    | (0, 0, 4, 5)
                    | (0, 0, 5, 4)
                    | (1, 1, 2, 3)
                    | (1, 1, 3, 2)
                    | (1, 1, 4, 5)
                    | (1, 1, 5, 4)
                    | (2, 3, 0, 0)
                    | (2, 3, 1, 1)
                    | (2, 3, 3, 2)
                    | (2, 3, 4, 5)
                    | (2, 3, 5, 4)
                    | (3, 2, 0, 0)
                    | (3, 2, 1, 1)
                    | (3, 2, 2, 3)
                    | (3, 2, 4, 5)
                    | (3, 2, 5, 4)
                    | (4, 5, 0, 0)
                    | (4, 5, 1, 1)
                    | (4, 5, 2, 3)
                    | (4, 5, 3, 2)
                    | (4, 5, 5, 4)
                    | (5, 4, 0, 0)
                    | (5, 4, 1, 1)
                    | (5, 4, 2, 3)
                    | (5, 4, 3, 2)
                    | (5, 4, 4, 5) => [0, 1, 3, 2, 5, 4],
                    (0, 0, 2, 4)
                    | (0, 0, 3, 5)
                    | (0, 0, 4, 3)
                    | (0, 0, 5, 2)
                    | (1, 1, 2, 4)
                    | (1, 1, 3, 5)
                    | (1, 1, 4, 3)
                    | (1, 1, 5, 2)
                    | (2, 4, 0, 0)
                    | (2, 4, 1, 1)
                    | (2, 4, 3, 5)
                    | (2, 4, 4, 3)
                    | (2, 4, 5, 2)
                    | (3, 5, 0, 0)
                    | (3, 5, 1, 1)
                    | (3, 5, 2, 4)
                    | (3, 5, 4, 3)
                    | (3, 5, 5, 2)
                    | (4, 3, 0, 0)
                    | (4, 3, 1, 1)
                    | (4, 3, 2, 4)
                    | (4, 3, 3, 5)
                    | (4, 3, 5, 2)
                    | (5, 2, 0, 0)
                    | (5, 2, 1, 1)
                    | (5, 2, 2, 4)
                    | (5, 2, 3, 5)
                    | (5, 2, 4, 3) => [0, 1, 4, 5, 3, 2],
                    (0, 0, 2, 5)
                    | (0, 0, 3, 4)
                    | (0, 0, 4, 2)
                    | (0, 0, 5, 3)
                    | (1, 1, 2, 5)
                    | (1, 1, 3, 4)
                    | (1, 1, 4, 2)
                    | (1, 1, 5, 3)
                    | (2, 5, 0, 0)
                    | (2, 5, 1, 1)
                    | (2, 5, 3, 4)
                    | (2, 5, 4, 2)
                    | (2, 5, 5, 3)
                    | (3, 4, 0, 0)
                    | (3, 4, 1, 1)
                    | (3, 4, 2, 5)
                    | (3, 4, 4, 2)
                    | (3, 4, 5, 3)
                    | (4, 2, 0, 0)
                    | (4, 2, 1, 1)
                    | (4, 2, 2, 5)
                    | (4, 2, 3, 4)
                    | (4, 2, 5, 3)
                    | (5, 3, 0, 0)
                    | (5, 3, 1, 1)
                    | (5, 3, 2, 5)
                    | (5, 3, 3, 4)
                    | (5, 3, 4, 2) => [0, 1, 5, 4, 2, 3],
                    (0, 1, 1, 0)
                    | (0, 1, 2, 2)
                    | (0, 1, 3, 3)
                    | (0, 1, 4, 5)
                    | (0, 1, 5, 4)
                    | (1, 0, 0, 1)
                    | (1, 0, 2, 2)
                    | (1, 0, 3, 3)
                    | (1, 0, 4, 5)
                    | (1, 0, 5, 4)
                    | (2, 2, 0, 1)
                    | (2, 2, 1, 0)
                    | (2, 2, 4, 5)
                    | (2, 2, 5, 4)
                    | (3, 3, 0, 1)
                    | (3, 3, 1, 0)
                    | (3, 3, 4, 5)
                    | (3, 3, 5, 4)
                    | (4, 5, 0, 1)
                    | (4, 5, 1, 0)
                    | (4, 5, 2, 2)
                    | (4, 5, 3, 3)
                    | (5, 4, 0, 1)
                    | (5, 4, 1, 0)
                    | (5, 4, 2, 2)
                    | (5, 4, 3, 3) => [1, 0, 2, 3, 5, 4],
                    (0, 1, 2, 3)
                    | (0, 1, 3, 2)
                    | (0, 1, 4, 4)
                    | (0, 1, 5, 5)
                    | (1, 0, 2, 3)
                    | (1, 0, 3, 2)
                    | (1, 0, 4, 4)
                    | (1, 0, 5, 5)
                    | (2, 3, 0, 1)
                    | (2, 3, 1, 0)
                    | (2, 3, 4, 4)
                    | (2, 3, 5, 5)
                    | (3, 2, 0, 1)
                    | (3, 2, 1, 0)
                    | (3, 2, 4, 4)
                    | (3, 2, 5, 5)
                    | (4, 4, 0, 1)
                    | (4, 4, 1, 0)
                    | (4, 4, 2, 3)
                    | (4, 4, 3, 2)
                    | (5, 5, 0, 1)
                    | (5, 5, 1, 0)
                    | (5, 5, 2, 3)
                    | (5, 5, 3, 2) => [1, 0, 3, 2, 4, 5],
                    (0, 1, 2, 4)
                    | (0, 1, 3, 5)
                    | (0, 1, 4, 2)
                    | (0, 1, 5, 3)
                    | (1, 0, 2, 4)
                    | (1, 0, 3, 5)
                    | (1, 0, 4, 2)
                    | (1, 0, 5, 3)
                    | (2, 4, 0, 1)
                    | (2, 4, 1, 0)
                    | (2, 4, 4, 2)
                    | (2, 4, 5, 3)
                    | (3, 5, 0, 1)
                    | (3, 5, 1, 0)
                    | (3, 5, 4, 2)
                    | (3, 5, 5, 3)
                    | (4, 2, 0, 1)
                    | (4, 2, 1, 0)
                    | (4, 2, 2, 4)
                    | (4, 2, 3, 5)
                    | (5, 3, 0, 1)
                    | (5, 3, 1, 0)
                    | (5, 3, 2, 4)
                    | (5, 3, 3, 5) => [1, 0, 4, 5, 2, 3],
                    (0, 1, 2, 5)
                    | (0, 1, 3, 4)
                    | (0, 1, 4, 3)
                    | (0, 1, 5, 2)
                    | (1, 0, 2, 5)
                    | (1, 0, 3, 4)
                    | (1, 0, 4, 3)
                    | (1, 0, 5, 2)
                    | (2, 5, 0, 1)
                    | (2, 5, 1, 0)
                    | (2, 5, 4, 3)
                    | (2, 5, 5, 2)
                    | (3, 4, 0, 1)
                    | (3, 4, 1, 0)
                    | (3, 4, 4, 3)
                    | (3, 4, 5, 2)
                    | (4, 3, 0, 1)
                    | (4, 3, 1, 0)
                    | (4, 3, 2, 5)
                    | (4, 3, 3, 4)
                    | (5, 2, 0, 1)
                    | (5, 2, 1, 0)
                    | (5, 2, 2, 5)
                    | (5, 2, 3, 4) => [1, 0, 5, 4, 3, 2],
                    (0, 2, 1, 3)
                    | (0, 2, 2, 1)
                    | (0, 2, 3, 0)
                    | (0, 2, 4, 4)
                    | (0, 2, 5, 5)
                    | (1, 3, 0, 2)
                    | (1, 3, 2, 1)
                    | (1, 3, 3, 0)
                    | (1, 3, 4, 4)
                    | (1, 3, 5, 5)
                    | (2, 1, 0, 2)
                    | (2, 1, 1, 3)
                    | (2, 1, 3, 0)
                    | (2, 1, 4, 4)
                    | (2, 1, 5, 5)
                    | (3, 0, 0, 2)
                    | (3, 0, 1, 3)
                    | (3, 0, 2, 1)
                    | (3, 0, 4, 4)
                    | (3, 0, 5, 5)
                    | (4, 4, 0, 2)
                    | (4, 4, 1, 3)
                    | (4, 4, 2, 1)
                    | (4, 4, 3, 0)
                    | (5, 5, 0, 2)
                    | (5, 5, 1, 3)
                    | (5, 5, 2, 1)
                    | (5, 5, 3, 0) => [2, 3, 1, 0, 4, 5],
                    (0, 2, 2, 0)
                    | (0, 2, 3, 1)
                    | (0, 2, 4, 5)
                    | (0, 2, 5, 4)
                    | (1, 3, 2, 0)
                    | (1, 3, 3, 1)
                    | (1, 3, 4, 5)
                    | (1, 3, 5, 4)
                    | (2, 0, 0, 2)
                    | (2, 0, 1, 3)
                    | (2, 0, 4, 5)
                    | (2, 0, 5, 4)
                    | (3, 1, 0, 2)
                    | (3, 1, 1, 3)
                    | (3, 1, 4, 5)
                    | (3, 1, 5, 4)
                    | (4, 5, 0, 2)
                    | (4, 5, 1, 3)
                    | (4, 5, 2, 0)
                    | (4, 5, 3, 1)
                    | (5, 4, 0, 2)
                    | (5, 4, 1, 3)
                    | (5, 4, 2, 0)
                    | (5, 4, 3, 1) => [2, 3, 0, 1, 5, 4],
                    (0, 2, 2, 4)
                    | (0, 2, 3, 5)
                    | (0, 2, 4, 0)
                    | (0, 2, 5, 1)
                    | (1, 3, 2, 4)
                    | (1, 3, 3, 5)
                    | (1, 3, 4, 0)
                    | (1, 3, 5, 1)
                    | (2, 4, 0, 2)
                    | (2, 4, 1, 3)
                    | (2, 4, 4, 0)
                    | (2, 4, 5, 1)
                    | (3, 5, 0, 2)
                    | (3, 5, 1, 3)
                    | (3, 5, 4, 0)
                    | (3, 5, 5, 1)
                    | (4, 0, 0, 2)
                    | (4, 0, 1, 3)
                    | (4, 0, 2, 4)
                    | (4, 0, 3, 5)
                    | (5, 1, 0, 2)
                    | (5, 1, 1, 3)
                    | (5, 1, 2, 4)
                    | (5, 1, 3, 5) => [2, 3, 4, 5, 0, 1],
                    (0, 2, 2, 5)
                    | (0, 2, 3, 4)
                    | (0, 2, 4, 1)
                    | (0, 2, 5, 0)
                    | (1, 3, 2, 5)
                    | (1, 3, 3, 4)
                    | (1, 3, 4, 1)
                    | (1, 3, 5, 0)
                    | (2, 5, 0, 2)
                    | (2, 5, 1, 3)
                    | (2, 5, 4, 1)
                    | (2, 5, 5, 0)
                    | (3, 4, 0, 2)
                    | (3, 4, 1, 3)
                    | (3, 4, 4, 1)
                    | (3, 4, 5, 0)
                    | (4, 1, 0, 2)
                    | (4, 1, 1, 3)
                    | (4, 1, 2, 5)
                    | (4, 1, 3, 4)
                    | (5, 0, 0, 2)
                    | (5, 0, 1, 3)
                    | (5, 0, 2, 5)
                    | (5, 0, 3, 4) => [2, 3, 5, 4, 1, 0],
                    (0, 3, 1, 2)
                    | (0, 3, 2, 0)
                    | (0, 3, 3, 1)
                    | (0, 3, 4, 4)
                    | (0, 3, 5, 5)
                    | (1, 2, 0, 3)
                    | (1, 2, 2, 0)
                    | (1, 2, 3, 1)
                    | (1, 2, 4, 4)
                    | (1, 2, 5, 5)
                    | (2, 0, 0, 3)
                    | (2, 0, 1, 2)
                    | (2, 0, 3, 1)
                    | (2, 0, 4, 4)
                    | (2, 0, 5, 5)
                    | (3, 1, 0, 3)
                    | (3, 1, 1, 2)
                    | (3, 1, 2, 0)
                    | (3, 1, 4, 4)
                    | (3, 1, 5, 5)
                    | (4, 4, 0, 3)
                    | (4, 4, 1, 2)
                    | (4, 4, 2, 0)
                    | (4, 4, 3, 1)
                    | (5, 5, 0, 3)
                    | (5, 5, 1, 2)
                    | (5, 5, 2, 0)
                    | (5, 5, 3, 1) => [3, 2, 0, 1, 4, 5],
                    (0, 3, 2, 1)
                    | (0, 3, 3, 0)
                    | (0, 3, 4, 5)
                    | (0, 3, 5, 4)
                    | (1, 2, 2, 1)
                    | (1, 2, 3, 0)
                    | (1, 2, 4, 5)
                    | (1, 2, 5, 4)
                    | (2, 1, 0, 3)
                    | (2, 1, 1, 2)
                    | (2, 1, 4, 5)
                    | (2, 1, 5, 4)
                    | (3, 0, 0, 3)
                    | (3, 0, 1, 2)
                    | (3, 0, 4, 5)
                    | (3, 0, 5, 4)
                    | (4, 5, 0, 3)
                    | (4, 5, 1, 2)
                    | (4, 5, 2, 1)
                    | (4, 5, 3, 0)
                    | (5, 4, 0, 3)
                    | (5, 4, 1, 2)
                    | (5, 4, 2, 1)
                    | (5, 4, 3, 0) => [3, 2, 1, 0, 5, 4],
                    (0, 3, 2, 4)
                    | (0, 3, 3, 5)
                    | (0, 3, 4, 1)
                    | (0, 3, 5, 0)
                    | (1, 2, 2, 4)
                    | (1, 2, 3, 5)
                    | (1, 2, 4, 1)
                    | (1, 2, 5, 0)
                    | (2, 4, 0, 3)
                    | (2, 4, 1, 2)
                    | (2, 4, 4, 1)
                    | (2, 4, 5, 0)
                    | (3, 5, 0, 3)
                    | (3, 5, 1, 2)
                    | (3, 5, 4, 1)
                    | (3, 5, 5, 0)
                    | (4, 1, 0, 3)
                    | (4, 1, 1, 2)
                    | (4, 1, 2, 4)
                    | (4, 1, 3, 5)
                    | (5, 0, 0, 3)
                    | (5, 0, 1, 2)
                    | (5, 0, 2, 4)
                    | (5, 0, 3, 5) => [3, 2, 4, 5, 1, 0],
                    (0, 3, 2, 5)
                    | (0, 3, 3, 4)
                    | (0, 3, 4, 0)
                    | (0, 3, 5, 1)
                    | (1, 2, 2, 5)
                    | (1, 2, 3, 4)
                    | (1, 2, 4, 0)
                    | (1, 2, 5, 1)
                    | (2, 5, 0, 3)
                    | (2, 5, 1, 2)
                    | (2, 5, 4, 0)
                    | (2, 5, 5, 1)
                    | (3, 4, 0, 3)
                    | (3, 4, 1, 2)
                    | (3, 4, 4, 0)
                    | (3, 4, 5, 1)
                    | (4, 0, 0, 3)
                    | (4, 0, 1, 2)
                    | (4, 0, 2, 5)
                    | (4, 0, 3, 4)
                    | (5, 1, 0, 3)
                    | (5, 1, 1, 2)
                    | (5, 1, 2, 5)
                    | (5, 1, 3, 4) => [3, 2, 5, 4, 0, 1],
                    (0, 4, 1, 5)
                    | (0, 4, 2, 2)
                    | (0, 4, 3, 3)
                    | (0, 4, 4, 1)
                    | (0, 4, 5, 0)
                    | (1, 5, 0, 4)
                    | (1, 5, 2, 2)
                    | (1, 5, 3, 3)
                    | (1, 5, 4, 1)
                    | (1, 5, 5, 0)
                    | (2, 2, 0, 4)
                    | (2, 2, 1, 5)
                    | (2, 2, 4, 1)
                    | (2, 2, 5, 0)
                    | (3, 3, 0, 4)
                    | (3, 3, 1, 5)
                    | (3, 3, 4, 1)
                    | (3, 3, 5, 0)
                    | (4, 1, 0, 4)
                    | (4, 1, 1, 5)
                    | (4, 1, 2, 2)
                    | (4, 1, 3, 3)
                    | (4, 1, 5, 0)
                    | (5, 0, 0, 4)
                    | (5, 0, 1, 5)
                    | (5, 0, 2, 2)
                    | (5, 0, 3, 3)
                    | (5, 0, 4, 1) => [4, 5, 2, 3, 1, 0],
                    (0, 4, 2, 0)
                    | (0, 4, 3, 1)
                    | (0, 4, 4, 2)
                    | (0, 4, 5, 3)
                    | (1, 5, 2, 0)
                    | (1, 5, 3, 1)
                    | (1, 5, 4, 2)
                    | (1, 5, 5, 3)
                    | (2, 0, 0, 4)
                    | (2, 0, 1, 5)
                    | (2, 0, 4, 2)
                    | (2, 0, 5, 3)
                    | (3, 1, 0, 4)
                    | (3, 1, 1, 5)
                    | (3, 1, 4, 2)
                    | (3, 1, 5, 3)
                    | (4, 2, 0, 4)
                    | (4, 2, 1, 5)
                    | (4, 2, 2, 0)
                    | (4, 2, 3, 1)
                    | (5, 3, 0, 4)
                    | (5, 3, 1, 5)
                    | (5, 3, 2, 0)
                    | (5, 3, 3, 1) => [4, 5, 0, 1, 2, 3],
                    (0, 4, 2, 1)
                    | (0, 4, 3, 0)
                    | (0, 4, 4, 3)
                    | (0, 4, 5, 2)
                    | (1, 5, 2, 1)
                    | (1, 5, 3, 0)
                    | (1, 5, 4, 3)
                    | (1, 5, 5, 2)
                    | (2, 1, 0, 4)
                    | (2, 1, 1, 5)
                    | (2, 1, 4, 3)
                    | (2, 1, 5, 2)
                    | (3, 0, 0, 4)
                    | (3, 0, 1, 5)
                    | (3, 0, 4, 3)
                    | (3, 0, 5, 2)
                    | (4, 3, 0, 4)
                    | (4, 3, 1, 5)
                    | (4, 3, 2, 1)
                    | (4, 3, 3, 0)
                    | (5, 2, 0, 4)
                    | (5, 2, 1, 5)
                    | (5, 2, 2, 1)
                    | (5, 2, 3, 0) => [4, 5, 1, 0, 3, 2],
                    (0, 4, 2, 3)
                    | (0, 4, 3, 2)
                    | (0, 4, 4, 0)
                    | (0, 4, 5, 1)
                    | (1, 5, 2, 3)
                    | (1, 5, 3, 2)
                    | (1, 5, 4, 0)
                    | (1, 5, 5, 1)
                    | (2, 3, 0, 4)
                    | (2, 3, 1, 5)
                    | (2, 3, 4, 0)
                    | (2, 3, 5, 1)
                    | (3, 2, 0, 4)
                    | (3, 2, 1, 5)
                    | (3, 2, 4, 0)
                    | (3, 2, 5, 1)
                    | (4, 0, 0, 4)
                    | (4, 0, 1, 5)
                    | (4, 0, 2, 3)
                    | (4, 0, 3, 2)
                    | (5, 1, 0, 4)
                    | (5, 1, 1, 5)
                    | (5, 1, 2, 3)
                    | (5, 1, 3, 2) => [4, 5, 3, 2, 0, 1],
                    (0, 5, 1, 4)
                    | (0, 5, 2, 2)
                    | (0, 5, 3, 3)
                    | (0, 5, 4, 0)
                    | (0, 5, 5, 1)
                    | (1, 4, 0, 5)
                    | (1, 4, 2, 2)
                    | (1, 4, 3, 3)
                    | (1, 4, 4, 0)
                    | (1, 4, 5, 1)
                    | (2, 2, 0, 5)
                    | (2, 2, 1, 4)
                    | (2, 2, 4, 0)
                    | (2, 2, 5, 1)
                    | (3, 3, 0, 5)
                    | (3, 3, 1, 4)
                    | (3, 3, 4, 0)
                    | (3, 3, 5, 1)
                    | (4, 0, 0, 5)
                    | (4, 0, 1, 4)
                    | (4, 0, 2, 2)
                    | (4, 0, 3, 3)
                    | (4, 0, 5, 1)
                    | (5, 1, 0, 5)
                    | (5, 1, 1, 4)
                    | (5, 1, 2, 2)
                    | (5, 1, 3, 3)
                    | (5, 1, 4, 0) => [5, 4, 2, 3, 0, 1],
                    (0, 5, 2, 0)
                    | (0, 5, 3, 1)
                    | (0, 5, 4, 3)
                    | (0, 5, 5, 2)
                    | (1, 4, 2, 0)
                    | (1, 4, 3, 1)
                    | (1, 4, 4, 3)
                    | (1, 4, 5, 2)
                    | (2, 0, 0, 5)
                    | (2, 0, 1, 4)
                    | (2, 0, 4, 3)
                    | (2, 0, 5, 2)
                    | (3, 1, 0, 5)
                    | (3, 1, 1, 4)
                    | (3, 1, 4, 3)
                    | (3, 1, 5, 2)
                    | (4, 3, 0, 5)
                    | (4, 3, 1, 4)
                    | (4, 3, 2, 0)
                    | (4, 3, 3, 1)
                    | (5, 2, 0, 5)
                    | (5, 2, 1, 4)
                    | (5, 2, 2, 0)
                    | (5, 2, 3, 1) => [5, 4, 0, 1, 3, 2],
                    (0, 5, 2, 1)
                    | (0, 5, 3, 0)
                    | (0, 5, 4, 2)
                    | (0, 5, 5, 3)
                    | (1, 4, 2, 1)
                    | (1, 4, 3, 0)
                    | (1, 4, 4, 2)
                    | (1, 4, 5, 3)
                    | (2, 1, 0, 5)
                    | (2, 1, 1, 4)
                    | (2, 1, 4, 2)
                    | (2, 1, 5, 3)
                    | (3, 0, 0, 5)
                    | (3, 0, 1, 4)
                    | (3, 0, 4, 2)
                    | (3, 0, 5, 3)
                    | (4, 2, 0, 5)
                    | (4, 2, 1, 4)
                    | (4, 2, 2, 1)
                    | (4, 2, 3, 0)
                    | (5, 3, 0, 5)
                    | (5, 3, 1, 4)
                    | (5, 3, 2, 1)
                    | (5, 3, 3, 0) => [5, 4, 1, 0, 2, 3],
                    (0, 5, 2, 3)
                    | (0, 5, 3, 2)
                    | (0, 5, 4, 1)
                    | (0, 5, 5, 0)
                    | (1, 4, 2, 3)
                    | (1, 4, 3, 2)
                    | (1, 4, 4, 1)
                    | (1, 4, 5, 0)
                    | (2, 3, 0, 5)
                    | (2, 3, 1, 4)
                    | (2, 3, 4, 1)
                    | (2, 3, 5, 0)
                    | (3, 2, 0, 5)
                    | (3, 2, 1, 4)
                    | (3, 2, 4, 1)
                    | (3, 2, 5, 0)
                    | (4, 1, 0, 5)
                    | (4, 1, 1, 4)
                    | (4, 1, 2, 3)
                    | (4, 1, 3, 2)
                    | (5, 0, 0, 5)
                    | (5, 0, 1, 4)
                    | (5, 0, 2, 3)
                    | (5, 0, 3, 2) => [5, 4, 3, 2, 1, 0],
                    x => panic!("{:?}", x),
                };
                AxisMap::Map2 { map }
            }
            m => m,
        }
    }

    pub fn map_axis(self, direction: u8, directions: [u8; 6]) -> SmallVec<[u8; 6]> {
        match self {
            AxisMap::None => directions.into(),
            AxisMap::Map1 { from, to } => {
                if from == direction || from == direction ^ 1 {
                    return smallvec![to];
                }
                let map = match (from, to) {
                    (from, to) if from == to => [0, 1, 2, 3, 4, 5],
                    (0, 1) | (1, 0) => [1, 0, 2, 3, 5, 4],
                    (0, 2) | (2, 0) => [2, 3, 0, 1, 5, 4],
                    (0, 3) | (3, 0) => [3, 2, 1, 0, 5, 4],
                    (0, 4) | (4, 0) => [4, 5, 3, 2, 0, 1],
                    (0, 5) | (5, 0) => [5, 4, 3, 2, 1, 0],
                    (1, 2) | (2, 1) => [3, 2, 1, 0, 5, 4],
                    (1, 3) | (3, 1) => [2, 3, 0, 1, 5, 4],
                    (1, 4) | (4, 1) => [5, 4, 3, 2, 1, 0],
                    (1, 5) | (5, 1) => [4, 5, 3, 2, 0, 1],
                    (2, 3) | (3, 2) => [0, 1, 3, 2, 5, 4],
                    (2, 4) | (4, 2) => [1, 0, 4, 5, 2, 3],
                    (2, 5) | (5, 2) => [1, 0, 5, 4, 3, 2],
                    (3, 4) | (4, 3) => [1, 0, 5, 4, 3, 2],
                    (3, 5) | (5, 3) => [1, 0, 4, 5, 2, 3],
                    (4, 5) | (5, 4) => [0, 1, 3, 2, 5, 4],
                    _ => unreachable!(),
                };
                directions
                    .iter()
                    .filter_map(|&d| {
                        if d == from || d == from ^ 1 {
                            None
                        } else {
                            Some(map[d as usize])
                        }
                    })
                    .collect()
            }
            AxisMap::Map2 { map } => {
                smallvec![map[direction as usize]]
            }
        }
    }
}

impl<T: Copy, D: DSize> Grid3<T, D> {
    pub fn new(init: T) -> Grid3<T, D> {
        let size = D::SIZE as usize;
        Grid3 {
            data: vec![init; size * size * size],
            _phantom: PhantomData,
        }
    }
}

impl<T, D: DSize> Grid3<T, D> {
    #[inline(always)]
    fn at(&self, p: Point<D>) -> usize {
        let d = D::SIZE as usize;
        let x = p.x as usize;
        let y = p.y as usize;
        let z = p.z as usize;
        (x * d + y) * d + z
    }
}

impl<T, D: DSize> GridFront<T, D> {
    pub fn from_vec(data: Vec<T>) -> GridFront<T, D> {
        GridFront {
            data,
            _phantom: PhantomData,
        }
    }

    #[inline(always)]
    fn at(&self, p: Point<D>) -> usize {
        (p.x * D::SIZE + p.z) as usize
    }
}

impl<T, D: DSize> GridRight<T, D> {
    pub fn from_vec(data: Vec<T>) -> GridRight<T, D> {
        GridRight {
            data,
            _phantom: PhantomData,
        }
    }

    #[inline(always)]
    fn at(&self, p: Point<D>) -> usize {
        (p.z * D::SIZE + p.y) as usize
    }

    pub fn row(&self, z: usize) -> &[T] {
        let d = D::SIZE as usize;
        &self.data[z * d..(z + 1) * d]
    }
}

impl<T, D: DSize> Index<Point<D>> for Grid3<T, D> {
    type Output = T;
    fn index(&self, p: Point<D>) -> &T {
        unsafe { self.data.get_unchecked(self.at(p)) }
    }
}

impl<T, D: DSize> IndexMut<Point<D>> for Grid3<T, D> {
    fn index_mut(&mut self, p: Point<D>) -> &mut T {
        let i = self.at(p);
        unsafe { self.data.get_unchecked_mut(i) }
    }
}

impl<T, D: DSize> Index<Point<D>> for GridFront<T, D> {
    type Output = T;
    fn index(&self, p: Point<D>) -> &T {
        unsafe { self.data.get_unchecked(self.at(p)) }
    }
}

impl<T, D: DSize> IndexMut<Point<D>> for GridFront<T, D> {
    fn index_mut(&mut self, p: Point<D>) -> &mut T {
        let i = self.at(p);
        unsafe { self.data.get_unchecked_mut(i) }
    }
}

impl<T, D: DSize> Index<Point<D>> for GridRight<T, D> {
    type Output = T;
    fn index(&self, p: Point<D>) -> &T {
        unsafe { self.data.get_unchecked(self.at(p)) }
    }
}

impl<T, D: DSize> IndexMut<Point<D>> for GridRight<T, D> {
    fn index_mut(&mut self, p: Point<D>) -> &mut T {
        let i = self.at(p);
        unsafe { self.data.get_unchecked_mut(i) }
    }
}

impl<T, D: DSize> Index<(u8, u8)> for GridFront<T, D> {
    type Output = T;
    fn index(&self, p: (u8, u8)) -> &T {
        let i = (p.0 * D::SIZE + p.1) as usize;
        unsafe { self.data.get_unchecked(i) }
    }
}

impl<T, D: DSize> IndexMut<(u8, u8)> for GridFront<T, D> {
    fn index_mut(&mut self, p: (u8, u8)) -> &mut T {
        let i = (p.0 * D::SIZE + p.1) as usize;
        unsafe { self.data.get_unchecked_mut(i) }
    }
}

impl<T, D: DSize> Index<(u8, u8)> for GridRight<T, D> {
    type Output = T;
    fn index(&self, p: (u8, u8)) -> &T {
        let (y, z) = p;
        let i = (z * D::SIZE + y) as usize;
        unsafe { self.data.get_unchecked(i) }
    }
}

impl<T, D: DSize> IndexMut<(u8, u8)> for GridRight<T, D> {
    fn index_mut(&mut self, p: (u8, u8)) -> &mut T {
        let (y, z) = p;
        let i = (z * D::SIZE + y) as usize;
        unsafe { self.data.get_unchecked_mut(i) }
    }
}
